{
    "Question": "Extract all bold texts. Print those raw texts separated by \\n.",
    "Answer": "jargon",
    "Label": {
        "typename": "markdown",
        "node_number": 1,
        "n_ary_ratio": 1,
        "para_len_ratio": 6,
        "few_shot_num": 9,
        "with_rule_hint": true,
        "other_label_list": [
            "TextRetrieval"
        ]
    },
    "Reference": "z\nlamb oops banana halo ravish h**jargon**![alt](og.jpeg \"hover text\") halo ravish halo\n# ab\nmonkey oops banana halo ravish halo",
    "timestamp": "08_28_2024_23_21_27.021257",
    "input_hash": 5057784233168571845,
    "examples": [
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "salvage",
            "Reference": "y\nperish lamb kangaroo unique**salvage**![alt](wi.jpeg \"hover text\")nique jargon qualify\n# z\nqualify lamb kanga![alt](xi.gif \"hover text\")roo unique jargon qualify"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "No bold texts presented in file.",
            "Reference": "q\nfar cafe lamb oops X-ray kangaroo\n# r\ngroot cafe lamb oops X-ray kangaroo"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "No bold texts presented in file.",
            "Reference": "i\nvigor idiot yogurt unique transformer cafe\n# j\nwake idio![alt](yh.jpeg \"hover text\")t yogurt unique transformer cafe"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "zen",
            "Reference": "u\ntransformer essence unique ka![alt](nf.jpeg \"hover text\")ngaroo oops nob\n# v\nunique essence unique kangar**zen**![alt](of.jpeg \"hover text\")ique kangaroo oops nob"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "unique\ntransformer",
            "Reference": "i\njargon unique oo**transformer**ps monkey nob unique\n# j\nkangaro**unique**o u![alt](je.gif \"hover text\")nique oops monkey nob unique"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "halo",
            "Reference": "m\nyogurt unique cafe jargon zen w![alt](pf.png \"hover text\")ake\n# n\nzen unique cafe ja**halo**![alt](qf.jpg \"hover text\")argon zen wake"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "kangaroo",
            "Reference": "h\ntransformer X-ray salva**kangaroo**![alt](ce.gif \"hover text\")nsformer X-ray salvage far groot wake\n# i\nuni![alt](de.gif \"hover text\")que X-ray salvage far groot wake"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "zen\napple banana",
            "Reference": "k\nzen zen ess**zen**ence essence apple banana\n# l\napple apple far e**apple banana**![alt](vf.jpg \"hover text\")e far essence apple banana"
        },
        {
            "Question": "Extract all bold texts. Print those raw texts separated by \\n. ",
            "Answer": "perish",
            "Reference": "b\nX-ray far peri**perish**sh oops monkey ![alt](if.png \"hover text\")idiot\n# c\nyogurt far perish oops monkey idiot"
        }
    ],
    "RuleHint": "To find the bold texts, search for double stars, i.e., **, the content between two occurrences of double stars is the bold texts. Note that the bold range should start from the double stars occurring at i-th spot throughout the whole input file, where i is odd, and end with double stars occurring at jth spot where j is even. For example, text between double stars appearing first and second time."
}